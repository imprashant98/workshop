"""
Django settings for workshop project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent


# ===========================
# SECURITY CONFIGURATION
# ===========================

# SECRET_KEY is critical for cryptographic signing. Keep it private!
SECRET_KEY = 'django-insecure-bq!p123sq1(mucl-a(k8+d=&quqg-%^n9vccfrxkw3()z%ys!8'

# DEBUG should be False in production for security purposes.
DEBUG = True

# ALLOWED_HOSTS restricts the hosts/domains that can serve the app.
ALLOWED_HOSTS = []


# ===========================
# APPLICATION CONFIGURATION
# ===========================

# Installed applications (default, third-party, and custom)
INSTALLED_APPS = [
    # Default Django apps for core functionality
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps for additional features
    "corsheaders",  # Handles Cross-Origin Resource Sharing
    'rest_framework',  # Enables Django REST Framework
    'drf_yasg',  # Auto-generates API documentation (Swagger)
    'django_filters',  # Provides advanced filtering for REST APIs
    
    # Custom apps
    'book',  # Example custom app for managing books
]

# Middleware processes requests/responses globally.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Adds security headers like HSTS
    'django.contrib.sessions.middleware.SessionMiddleware',  # Manages session data
    'django.middleware.common.CommonMiddleware',  # URL normalization, other utilities
    'django.middleware.csrf.CsrfViewMiddleware',  # Protects against CSRF attacks
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Manages user authentication
    'django.contrib.messages.middleware.MessageMiddleware',  # Enables one-time user messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Prevents clickjacking attacks
]

# Main URL configuration
ROOT_URLCONF = 'workshop.urls'

# Template configuration: where to find and how to load templates.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Template engine
        'DIRS': [
            BASE_DIR / 'templates',  # Additional template directories
        ],
        'APP_DIRS': True,  # Enables searching for templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Adds debugging info
                'django.template.context_processors.request',  # Passes request to templates
                'django.contrib.auth.context_processors.auth',  # Adds user auth to templates
                'django.contrib.messages.context_processors.messages',  # Adds messages framework
            ],
        },
    },
]

# WSGI configuration (entry point for serving the app)
WSGI_APPLICATION = 'workshop.wsgi.application'


# ===========================
# DATABASE CONFIGURATION
# ===========================

# Default database (SQLite for development)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # SQLite backend
        'NAME': BASE_DIR / 'db.sqlite3',  # Path to the database file
    }
}

# ===========================
# DJANGO REST FRAMEWORK SETTINGS
# ===========================

REST_FRAMEWORK = {
    # Authentication mechanisms supported
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # JWT support
        "rest_framework.authentication.TokenAuthentication",  # Token-based auth
        "rest_framework.authentication.BasicAuthentication",  # Basic HTTP auth
        "rest_framework.authentication.SessionAuthentication",  # Session-based auth
    ),
    # Adds filtering capabilities
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    # Default pagination setup
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
}


# ===========================
# PASSWORD VALIDATION
# ===========================

# Validators for strong password policies
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Minimum length
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # No common passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Avoid numeric-only passwords
    },
]


# ===========================
# INTERNATIONALIZATION
# ===========================

# Default language and time zone
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'

# Enables internationalization and timezone support
USE_I18N = True
USE_TZ = True


# ===========================
# STATIC AND MEDIA FILES
# ===========================

# Static files (CSS, JavaScript, images)
STATIC_URL = 'static/'  # Base URL for static files

# Static directories to include
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Folder for project-specific static files
]

# Path where collected static files will be stored
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (uploads)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# ===========================
# DEFAULT SETTINGS
# ===========================

# Default primary key field type for models
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'







# import os
# import platform
# from dotenv import load_dotenv

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent

# server_type = "AWS"#"LOCAL"

# current_os = platform.system()
# print(current_os, " operatitng system")

# if current_os == "Linux" and server_type == "AWS":
#     dotenv_path = os.path.join(os.path.dirname(__file__), '.env') #server env
#     print(current_os ,f":{server_type} server env connected")
# elif current_os == "Windows" or current_os == "Darwin":
#     dotenv_path = os.path.join(os.path.dirname(__file__), 'local_env') #this is local env
#     print(current_os , ":local env connected")
# load_dotenv(dotenv_path)